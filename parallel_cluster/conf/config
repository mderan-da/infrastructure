[aws]
aws_region_name = ap-southeast-2

[global]
cluster_template = tothill 
update_check     = true
sanity_check     = true

[cluster tothill]
base_os               = alinux2
key_name              = romanvg 
vpc_settings          = network
efs_settings          = awselasticfs
#fsx_settings          = lustrefs
s3_read_resource      = *
cluster_type          = spot
master_instance_type  = t2.medium
compute_instance_type = m5.large
#post_install          = s3://tothill-temp/parallel_cluster/testcluster/bootstrap.sh
#post_install_args     = "R wget"
ec2_iam_role          = parallelcluster-ec2-instance-role
scheduler             = slurm
initial_queue_size    = 1
custom_ami            = ami-002b1d0f440e6caea

[cluster umccr_dev]
base_os               = alinux2
vpc_settings          = umccr_dev_network
# Definitely experimental
fsx_settings          = umccr_dev_lustrefs
s3_read_resource      = *
cluster_type          = spot
key_name              = alexis-wfh-dev
# Need something substantial to hold the slurm database
master_instance_type  = t2.medium
# 16 CPUs and 64 Gb
compute_instance_type = m5.4xlarge
# Using additional_iam_policies over ec2_iam_role
# TODO check if these policies are necessary
additional_iam_policies = arn:aws:iam::aws:policy/AmazonFSxFullAccess, arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore, arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
scheduler             = slurm
initial_queue_size    = 1
# Basic ami with installations of
# R, python3.8, conda, pip, ruby, golang, rust
# conda has been initialised to the ec2-user
# TODO check base,conda,cromwell and build custom-ami from it
# custom_ami            = ami-041fb79614da5fa41
post_install          = s3://umccr-temp-dev/Alexis_parallel_cluster_test/bootstrap/bootstrap-slurm-cromwell.sh

[vpc network]
vpc_id = vpc-0020eaf6bc27c98a4
master_subnet_id = subnet-07a7800b072d25eb3
compute_subnet_id = subnet-0506a40a906ea0156
use_public_ips = true

[vpc umccr_dev_network]
# Default vpc for dev account
vpc_id = vpc-00eafc63c0dfca266
# Compute subnet ids take the same subnet as the master
# Our default public subnet
master_subnet_id = subnet-0fab038b0341872f1
# Elastic IP address is associated to the master instance.
use_public_ips = true

[aliases]
ssh = ssh {CFN_USER}@{MASTER_IP} {ARGS}

[efs awselasticfs]
shared_dir       = efs
encrypted        = false
performance_mode = generalPurpose

[fsx umccr_dev_lustrefs]
shared_dir                = /fsx
storage_capacity          = 3600
imported_file_chunk_size  = 1024
import_path               = s3://umccr-temp-dev/Alexis_parallel_cluster_test/input_folder
# TODO read up on import vs export path
#export_path               = s3://umccr-temp-dev/Alexis_parallel_cluster_test/output_folder
